<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org

  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).

  BigBlueButton is free software; you can redistribute it and/or modify it under the
  terms of the GNU Lesser General Public License as published by the Free Software
  Foundation; either version 2.1 of the License, or (at your option) any later
  version.

  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License along
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

  $Id: $
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:mate="http://mate.asfusion.com/"
                backgroundColor="white"
                width="100%" height="100%"
                layout="absolute">
    <mate:Listener type="{FlexEvent.APPLICATION_COMPLETE}" method="onApplicationComplete"/>
    <mate:Listener type="{ViewStreamEvent.START}" method="onViewStreamStart"/>
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent"/>


    <mx:Script>
        <![CDATA[
        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        import org.bigbluebutton.modules.deskshare.events.CursorEvent;
        import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
        import org.bigbluebutton.modules.deskshare.services.DeskshareService;

        private var cursor:Shape = new Shape();
        private var service:DeskshareService = new DeskshareService();

        private var ns:NetStream;
        private var videoHolder:UIComponent;
        private var video:Video;

        private var containerRect:Rectangle;
        private var videoRect:Rectangle;
        private var screenRect:Rectangle;

        private var host:String;
        private var room:String;


        public function stopViewing():void {
            ns.close();
        }

        private function onApplicationComplete(event:FlexEvent):void {
            trace("onApplicationComplete");
            var p:Object = application.parameters;
            host = p.HOST;
            room = p.ROOM;

            containerRect = new Rectangle(0,0, parent.width, parent.height);
            screenRect = new Rectangle(0, 0, stage.fullScreenWidth, stage.fullScreenHeight);
            service.connect(host + "/" + room);
            stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullScreen);
            buildCursor();
        }

        private function onViewStreamStart(event:ViewStreamEvent):void {
            trace("onViewStreamStart", event.videoWidth, event.videoHeight);
            videoRect = new Rectangle(0, 0, event.videoWidth, event.videoHeight);
            buildNetStream();
            buildVideoHolder();
            buildVideo();
        }

        private function onUpdateCursorEvent(event:CursorEvent):void {
            if (cursor == null || video == null || videoHolder == null) return;
            cursor.x = (event.x / video.videoWidth) * videoHolder.width;
            cursor.y = (event.y / video.videoHeight) * videoHolder.height;
            cursor.visible = true;

            cursorImg.visible = true;

            // DO NOT compute the x and y coordinate and assign directly to the cursorImg
            // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
            cursorImg.x = cursor.x;
            cursorImg.y = cursor.y;

        }

        private function onAsyncError(e:AsyncErrorEvent):void {
            trace("VideoWindow::asyncerror " + e.toString());
        }

        private function onNetStatus(e:NetStatusEvent):void {
            switch (e.info.code) {
                case "NetStream.Play.Start":
                    trace("NetStream.Publish.Start for broadcast stream " + room);
                    trace("Dispatching start viewing event");
                    service.sendStartedViewingNotification();
                    break;
                case "NetStream.Play.UnpublishNotify":
                    trace("NetStream.Play.UnpublishNotify for broadcast stream " + room);
                    stopViewing();
                    break;
            }
        }

        private function onFullScreen(event:FullScreenEvent):void {
            trace("onFullScreen", event);
            if(event.fullScreen) {
                fullscreen.visible = false;
                resizeVideo(screenRect);
                stage.fullScreenSourceRect = new Rectangle(video.x, video.y, video.width, video.height);
            } else {
                fullscreen.visible = true;
                resizeVideo(containerRect);
            }
        }

        private function scaleRectToFit(sourceRect:Rectangle, boundsRect:Rectangle):Rectangle {
            trace("scaleRectToFit", sourceRect, boundsRect);
            var sourceAspectRatio:Number = (sourceRect.width / sourceRect.height);
            var targetAspectRatio:Number = (boundsRect.height / boundsRect.width);
            var result:Rectangle = new Rectangle(0,0,Math.min(boundsRect.width, sourceRect.width),
                    Math.min(boundsRect.height, sourceRect.height));

            if (targetAspectRatio >= sourceAspectRatio) {
                result.width = result.height * sourceAspectRatio;
            } else {
                result.height = result.width / sourceAspectRatio;
            }

            return result;
        }

        private function toggleFullscreen():void {
            if (stage.displayState != StageDisplayState.FULL_SCREEN) {
                stage.displayState = StageDisplayState.FULL_SCREEN;
            } else {
                stage.displayState = StageDisplayState.NORMAL;
            }
        }

        private function buildNetStream():void {
            ns = new NetStream(service.getConnection());
            ns.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
            ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
            ns.client = this;
            ns.bufferTime = 0;
            ns.receiveVideo(true);
            ns.receiveAudio(false);
            ns.play(room);
        }

        private function buildCursor():void {
            cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
            cursor.graphics.drawCircle(0, 0, 3);
            cursor.visible = false;
        }

        private function buildVideoHolder():void {
            videoHolder = new UIComponent();
            videoHolder.addChild(cursor);
            videoHolder.addChild(cursorImg);
            vbox.addChild(videoHolder);
        }

        private function buildVideo():void {
            video = new Video(videoRect.width, videoRect.height);
            video.attachNetStream(ns);
            videoHolder.addChild(video);
            trace(video);
            resizeVideo(containerRect);
        }

        private function resizeVideo(boundsRect:Rectangle):void {
            var updatedSize:Rectangle = scaleRectToFit(videoRect, boundsRect);
            videoHolder.width = video.width = updatedSize.width;
            videoHolder.height = video.height = updatedSize.height;
        }
        ]]>
    </mx:Script>

    <mx:Image id="cursorImg" visible="false"
              source="@Embed('org/bigbluebutton/modules/deskshare/assets/images/cursor4.png')"/>
    <mx:Canvas id="vbox" width="100%" height="100%" />
    <mx:Button id="fullscreen" label="Fullscreen" click="toggleFullscreen();" bottom="0" right="0" />
</mx:Application>
